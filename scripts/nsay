#!/bin/bash

if [[ "$2" == "" ]]; then

	scale=1;

else

	scale="$2";

fi;

LETTERS=("A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z")
WORDS=("the" "be" "to" "of" "and" "a" "in" "that" "have" "I" "it" "for" "not" "on" "with" "he" "as" "you" "do" "at" "this" "but" "his" "by" "from" "they" "we" "say" "her" "she" "or" "an" "will" "my" "one" "all" "would" "there" "their" "what" "so" "up" "out" "if" "about" "who" "get" "which" "go" "me" "when" "make" "can" "like" "time" "no" "just" "him" "know" "take" "people" "into" "year" "your" "good" "some" "could" "them" "see" "other" "than" "then" "now" "look" "only" "come" "its" "over" "think" "also" "back" "after" "use" "two" "how" "our" "work" "first" "well" "way" "even" "new" "want" "because" "any" "these" "give" "day" "most" "us")

declare -A morse
morse[0]='-----'
morse[1]='.----'
morse[2]='..---'
morse[3]='...--'
morse[4]='....-'
morse[5]='.....'
morse[6]='-....'
morse[7]='--...'
morse[8]='---..'
morse[9]='----.'
morse[A]='.-'
morse[B]='-...'
morse[C]='-.-.'
morse[D]='-..'
morse[E]='.'
morse[F]='..-.'
morse[G]='--.'
morse[H]='....'
morse[I]='..'
morse[J]='.---'
morse[K]='-.-'
morse[L]='.-..'
morse[M]='--'
morse[N]='-.'
morse[O]='---'
morse[P]='.--.'
morse[Q]='--.-'
morse[R]='.-.'
morse[S]='...'
morse[T]='-'
morse[U]='..-'
morse[V]='...-'
morse[W]='.--'
morse[X]='-..-'
morse[Y]='-.--'
morse[Z]='--..'
morse[.]='.-.-.-'
morse[,]='--..--'
morse[?]='..--..'
morse[/]='-..-.'
morse[!]='-.-.--'

morseify () {
	while read -rN1 c; do

	c=${c^}

	if [[ $c == $'\n' ]]; then

		printf '\n'

	elif [[ $c == ' ' ]]; then

		printf '/'

	else

		printf '%s ' "${morse[$c]}"

	fi

done
}

display () {
	input=$(echo "$1" | morseify);
	for (( i=0; i<${#input}; i++ )); do
		case ${input:$i:1} in
			'.')
				numlockx off;
				numlockx on;
				sleep "$(bc<<<.1*"$scale")";
				numlockx off;
				sleep "$(bc<<<.1*"$scale")";
				;;
			'-')
				numlockx off;
				numlockx on;
				sleep "$(bc<<<.3*"$scale")";
				numlockx off;
				sleep "$(bc<<<.1*"$scale")";
				;;
			' ')
				sleep "$(bc<<<.3*"$scale")";
				;;
			'/')
				sleep "$(bc<<<.4*"$scale")";
				;;
			*)
				;;
		esac
	done
}

letters () {
	echo a
}

words () {
	RANDOM=$$$(date +%s)
	points=0
	total=0
	while true
	do
		word=${WORDS[$RANDOM % ${#WORDS[@]} ]}
		echo "$points/$total Which word is this? Type \"redo\" To re-transmit."
		display "$word"
		read -r response
		while [[ $response == "redo" ]]
		do
			echo "$points/$total Which word is this? Type \"redo\" To re-transmit."
			display "$word"
			read -r response
		done
		if [[ $response == "$word" ]]; then
			echo "Correct! Word was $word."
			((points++))
		else
			echo "False! Word was $word."
		fi
		((total++))
	done
}

sentences () {
	echo a
}

usage () {
	echo "Usage: nsay [ OPTIONS ]
	-p/--print <text>	Display the text via numlock morse
	-h/--help		Display this message and exit (default)
	-t/--scale <scale>	Set the morse time scale (default: 1)
	-w/--words		Test user on words
	-l/--letters		Test user on letters
	-s/--sentence		Test user on sentences"
}

words